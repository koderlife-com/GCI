#!/bin/bash

set -e

echo -n "Do you want to install Greenbone Community Edition 22.4.0? (Y/n) "
read RET

if [ "$RET" == "no" ] || [ "$RET" == "NO" ] || [ "$RET" == "No" ] || \
    [ "$RET" == "n" ] || [ "$RET" == "N" ]; then
    exit
elif [ "$RET" == "yes" ] || [ "$RET" == "YES" ] || [ "$RET" == "Yes" ] || \
        [ "$RET" == "Y" ] || [ "$RET" == "y" ] || [ "$RET" == "" ]; then


       
    export GCE_VERSION=22.4.0
    export SOURCE_DIR=/opt/GCE_$GCE_VERSION/src
    export INSTALL_PREFIX=/opt/GCE_$GCE_VERSION   
    export PYTHONPATH=/opt/GCE_$GCE_VERSION/lib/python3.9/site-packages/
    export PATH=$PATH:/opt/GCE_$GCE_VERSION/bin:/opt/GCE_$GCE_VERSION/sbin


    useradd -r -m -U -s /bin/bash gvm || true
    
    apt update
    apt -y install wget

    mkdir -p /opt/GCE_$GCE_VERSION
    mkdir -p /opt/GCE_$GCE_VERSION/src

    apt install -y --no-install-recommends \
	build-essential \
  	curl \
  	cmake \
  	pkg-config \
  	python3 \
  	python3-pip \
  	gnupg


    curl -f -L https://www.greenbone.net/GBCommunitySigningKey.asc -o /tmp/GBCommunitySigningKey.asc
    gpg --import /tmp/GBCommunitySigningKey.asc


    echo "8AE4BE429B60A59B311C2E739823FAA60ED1E580:6:" > /tmp/ownertrust.txt
    gpg --import-ownertrust < /tmp/ownertrust.txt





############################################ BEGIN - GVM-LIBS ###########################################

    apt install -y \
        libglib2.0-dev \
  	    libgpgme-dev \
  	    libgnutls28-dev \
  	    uuid-dev \
  	    libssh-gcrypt-dev \
  	    libhiredis-dev \
  	    libxml2-dev \
  	    libpcap-dev \
  	    libnet1-dev \
  	    libpaho-mqtt-dev \
	    libldap2-dev \
        libradcli-dev


    
    curl -f -L https://github.com/greenbone/gvm-libs/archive/refs/tags/v$GCE_VERSION.tar.gz -o /opt/GCE_$GCE_VERSION/src/gvm-libs-$GCE_VERSION.tar.gz
    curl -f -L https://github.com/greenbone/gvm-libs/releases/download/v$GCE_VERSION/gvm-libs-$GCE_VERSION.tar.gz.asc -o /opt/GCE_$GCE_VERSION/src/gvm-libs-$GCE_VERSION.tar.gz.asc        
    gpg --verify /opt/GCE_$GCE_VERSION/src/gvm-libs-$GCE_VERSION.tar.gz.asc /opt/GCE_$GCE_VERSION/src/gvm-libs-$GCE_VERSION.tar.gz
        
    tar -C /opt/GCE_$GCE_VERSION/src  -xvzf /opt/GCE_$GCE_VERSION/src/gvm-libs-$GCE_VERSION.tar.gz
    rm /opt/GCE_$GCE_VERSION/src/gvm-libs-$GCE_VERSION.tar.gz
    rm /opt/GCE_$GCE_VERSION/src/gvm-libs-$GCE_VERSION.tar.gz.asc
    cd /opt/GCE_$GCE_VERSION/src/gvm-libs-$GCE_VERSION
    mkdir -p build
    cd build    


    cmake /opt/GCE_$GCE_VERSION/src/gvm-libs-$GCE_VERSION \
        -DCMAKE_INSTALL_PREFIX=/opt/GCE_$GCE_VERSION \
        -DCMAKE_BUILD_TYPE=Release \
        -DSYSCONFDIR=/etc \
        -DLOCALSTATEDIR=/var

    make -j$(nproc)
    make install 

############################################ END - GVM-LIBS ###########################################




############################################ BEGIN - GVMD ###########################################
    export PKG_CONFIG_PATH=/opt/GCE_$GCE_VERSION/lib/pkgconfig:$PKG_CONFIG_PATH

    apt install -y \
        libglib2.0-dev \
        libgnutls28-dev \
        libpq-dev \
        postgresql-server-dev-13 \
        libical-dev \
        xsltproc \
        rsync \
        libbsd-dev \
        libgpgme-dev

    apt install -y --no-install-recommends \
        texlive-latex-extra \
        texlive-fonts-recommended \
        xmlstarlet \
        zip \
        rpm \
        fakeroot \
        dpkg \
        nsis \
        gnupg \
        gpgsm \
        wget \
        sshpass \
        openssh-client \
        socat \
        snmp \
        python3 \
        smbclient \
        python3-lxml \
        gnutls-bin \
        xml-twig-tools

curl -f -L https://github.com/greenbone/gvmd/archive/refs/tags/v$GCE_VERSION.tar.gz -o /opt/GCE_$GCE_VERSION/src/gvmd-$GCE_VERSION.tar.gz
tar -C /opt/GCE_$GCE_VERSION/src -xvzf /opt/GCE_$GCE_VERSION/src/gvmd-$GCE_VERSION.tar.gz
rm /opt/GCE_$GCE_VERSION/src/gvmd-$GCE_VERSION.tar.gz

cd /opt/GCE_$GCE_VERSION/src/gvmd-$GCE_VERSION
mkdir -p build
cd build

cmake /opt/GCE_$GCE_VERSION/src/gvmd-$GCE_VERSION \
  -DCMAKE_INSTALL_PREFIX=/opt/GCE_$GCE_VERSION \
  -DCMAKE_BUILD_TYPE=Release \
  -DLOCALSTATEDIR=/var \
  -DSYSCONFDIR=/etc \
  -DGVM_DATA_DIR=/var \
  -DGVMD_RUN_DIR=/run/gvmd \
  -DOPENVAS_DEFAULT_SOCKET=/run/ospd/ospd-openvas.sock \
  -DGVM_FEED_LOCK_PATH=/var/lib/gvm/feed-update.lock \
  -DSYSTEMD_SERVICE_DIR=/lib/systemd/system \
  -DLOGROTATE_DIR=/etc/logrotate.d

make -j$(nproc)
make install

############################################ END - GVMD ###########################################




############################################ BEGIN - PG-GVM ###########################################

apt install -y \
        libglib2.0-dev \
        postgresql-server-dev-13 \
        libical-dev

curl -f -L https://github.com/greenbone/pg-gvm/archive/refs/tags/v$GCE_VERSION.tar.gz -o /opt/GCE_$GCE_VERSION/src/pg-gvm-$GCE_VERSION.tar.gz
tar -C /opt/GCE_$GCE_VERSION/src -xvzf /opt/GCE_$GCE_VERSION/src/pg-gvm-$GCE_VERSION.tar.gz
rm /opt/GCE_$GCE_VERSION/src/pg-gvm-$GCE_VERSION.tar.gz

cd /opt/GCE_$GCE_VERSION/src/pg-gvm-$GCE_VERSION
mkdir -p build
cd build

cmake /opt/GCE_$GCE_VERSION/src/pg-gvm-$GCE_VERSION \
  -DCMAKE_BUILD_TYPE=Release

make -j$(nproc)
make install

############################################ END - PG-GVM ###########################################




############################################ BEGIN - GSA ###########################################

apt -y install lsb-release

export NODE_VERSION=node_14.x
export KEYRING=/usr/share/keyrings/nodesource.gpg
export DISTRIBUTION="$(lsb_release -s -c)"

curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --dearmor | sudo tee "$KEYRING" >/dev/null
gpg --no-default-keyring --keyring "$KEYRING" --list-keys

echo "deb [signed-by=$KEYRING] https://deb.nodesource.com/$NODE_VERSION $DISTRIBUTION main" | sudo tee /etc/apt/sources.list.d/nodesource.list
echo "deb-src [signed-by=$KEYRING] https://deb.nodesource.com/$NODE_VERSION $DISTRIBUTION main" | sudo tee -a /etc/apt/sources.list.d/nodesource.list


sudo apt update
sudo apt install -y nodejs


curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

sudo apt update
sudo apt install -y yarn


curl -f -L https://github.com/greenbone/gsa/archive/refs/tags/v$GCE_VERSION.tar.gz -o /opt/GCE_$GCE_VERSION/src/gsa-$GCE_VERSION.tar.gz
tar -C /opt/GCE_$GCE_VERSION/src -xvzf /opt/GCE_$GCE_VERSION/src/gsa-$GCE_VERSION.tar.gz
rm $SOURCE_DIR/gsa-$GCE_VERSION.tar.gz

cd $SOURCE_DIR/gsa-$GCE_VERSION
rm -rf build

yarn
yarn build


mkdir -p $INSTALL_PREFIX/share/gvm/gsad/web/
cp -r build/* $INSTALL_PREFIX/share/gvm/gsad/web/


apt install -y \
    libmicrohttpd-dev \
    libxml2-dev \
    libglib2.0-dev \
    libgnutls28-dev


curl -f -L https://github.com/greenbone/gsad/archive/refs/tags/v$GCE_VERSION.tar.gz -o $SOURCE_DIR/gsad-$GCE_VERSION.tar.gz
tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/gsad-$GCE_VERSION.tar.gz
rm $SOURCE_DIR/gsad-$GCE_VERSION.tar.gz
cd $SOURCE_DIR/gsad-$GCE_VERSION
mkdir -p build
cd build

cmake $SOURCE_DIR/gsad-$GCE_VERSION \
  -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
  -DCMAKE_BUILD_TYPE=Release \
  -DSYSCONFDIR=/etc \
  -DLOCALSTATEDIR=/var \
  -DGVMD_RUN_DIR=/run/gvmd \
  -DGSAD_RUN_DIR=/run/gsad \
  -DLOGROTATE_DIR=/etc/logrotate.d

make -j$(nproc)
make install



############################################ END - GSA ###########################################





############################################ BEGIN - OPENVAS-SMB ###########################################

apt install -y \
    gcc-mingw-w64 \
    libgnutls28-dev \
    libglib2.0-dev \
    libpopt-dev \
    libunistring-dev \
    heimdal-dev \
    perl-base


curl -f -L https://github.com/greenbone/openvas-smb/archive/refs/tags/v$GCE_VERSION.tar.gz -o $SOURCE_DIR/openvas-smb-$GCE_VERSION.tar.gz
tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/openvas-smb-$GCE_VERSION.tar.gz
rm $SOURCE_DIR/openvas-smb-$GCE_VERSION.tar.gz
cd $SOURCE_DIR/openvas-smb-$GCE_VERSION
mkdir -p build
cd build

cmake $SOURCE_DIR/openvas-smb-$GCE_VERSION \
  -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
  -DCMAKE_BUILD_TYPE=Release

make -j$(nproc)
make install


############################################ END - OPENVAS-SMB ###########################################



############################################ BEGIN - OPENVAS-SCANNER ###########################################

apt install -y \
    bison \
    libglib2.0-dev \
    libgnutls28-dev \
    libgcrypt20-dev \
    libpcap-dev \
    libgpgme-dev \
    libksba-dev \
    rsync \
    nmap \
    libjson-glib-dev \
    libbsd-dev \
    python3-impacket \
    libsnmp-dev


curl -f -L https://github.com/greenbone/openvas-scanner/archive/refs/tags/v$GCE_VERSION.tar.gz -o $SOURCE_DIR/openvas-scanner-$GCE_VERSION.tar.gz
tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/openvas-scanner-$GCE_VERSION.tar.gz
rm $SOURCE_DIR/openvas-scanner-$GCE_VERSION.tar.gz
cd $SOURCE_DIR/openvas-scanner-$GCE_VERSION
mkdir -p build
cd build
cmake $SOURCE_DIR/openvas-scanner-$GCE_VERSION \
  -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
  -DCMAKE_BUILD_TYPE=Release \
  -DSYSCONFDIR=/etc \
  -DLOCALSTATEDIR=/var \
  -DOPENVAS_FEED_LOCK_PATH=/var/lib/openvas/feed-update.lock \
  -DOPENVAS_RUN_DIR=/run/ospd

make -j$(nproc)
make install




############################################ END - OPENVAS-SCANNER ###########################################




############################################ BEGIN - OSPD-OPENVAS ###########################################

export OSPD_OPENVAS_VERSION=22.4.2


apt install -y \
    python3 \
    python3-pip \
    python3-setuptools \
    python3-packaging \
    python3-wrapt \
    python3-cffi \
    python3-psutil \
    python3-lxml \
    python3-defusedxml \
    python3-paramiko \
    python3-redis \
    python3-paho-mqtt


curl -f -L https://github.com/greenbone/ospd-openvas/archive/refs/tags/v$OSPD_OPENVAS_VERSION.tar.gz -o $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz
tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz
rm $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz
cd $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION
#python3 -m pip install . --prefix=$INSTALL_PREFIX --root=/ --no-warn-script-location
python3 -m pip install . --prefix=$INSTALL_PREFIX




############################################ END - OSPD-OPENVAS ###########################################




############################################ BEGIN - NOTUS-SCANNER  ###########################################

export NOTUS_VERSION=22.4.1
apt install -y \
    python3 \
    python3-pip \
    python3-setuptools \
    python3-paho-mqtt \
    python3-psutil \
    python3-gnupg

curl -f -L https://github.com/greenbone/notus-scanner/archive/refs/tags/v$NOTUS_VERSION.tar.gz -o $SOURCE_DIR/notus-scanner-$NOTUS_VERSION.tar.gz
tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/notus-scanner-$NOTUS_VERSION.tar.gz
rm $SOURCE_DIR/notus-scanner-$NOTUS_VERSION.tar.gz
cd $SOURCE_DIR/notus-scanner-$NOTUS_VERSION
#python3 -m pip install . --prefix=$INSTALL_PREFIX --root=/ --no-warn-script-location
python3 -m pip install . --prefix=$INSTALL_PREFIX


############################################ END - NOTUS-SCANNER  ###########################################




############################################ BEGIN - GVM-TOOLS  ###########################################

apt install -y \
  python3 \
  python3-pip \
  python3-setuptools \
  python3-packaging \
  python3-lxml \
  python3-defusedxml \
  python3-paramiko

python3 -m pip install --prefix=$INSTALL_PREFIX --root=/ --no-warn-script-location gvm-tools

############################################ END - GVM-TOOLS  ###########################################

cat > /etc/ld.so.conf.d/gvm.conf <<EOF
/opt/GCE_$GCE_VERSION/lib
EOF

ldconfig




apt install -y redis-server
cp $SOURCE_DIR/openvas-scanner-$GCE_VERSION/config/redis-openvas.conf /etc/redis/
chown redis:redis /etc/redis/redis-openvas.conf
echo "db_address = /run/redis-openvas/redis.sock" | sudo tee -a /etc/openvas/openvas.conf
systemctl start redis-server@openvas.service
systemctl enable redis-server@openvas.service
usermod -aG redis gvm

apt install -y mosquitto
systemctl start mosquitto.service
systemctl enable mosquitto.service
echo "mqtt_server_uri = localhost:1883" | sudo tee -a /etc/openvas/openvas.conf

mkdir -p /var/lib/notus
mkdir -p /run/gvmd

chown -R gvm:gvm /var/lib/gvm
chown -R gvm:gvm /var/lib/openvas
chown -R gvm:gvm /var/lib/notus
chown -R gvm:gvm /var/log/gvm
chown -R gvm:gvm /run/gvmd

chmod -R g+srw /var/lib/gvm
chmod -R g+srw /var/lib/openvas
chmod -R g+srw /var/log/gvm

chown gvm:gvm $INSTALL_PREFIX/sbin/gvmd
chmod 6750 $INSTALL_PREFIX/sbin/gvmd

chown gvm:gvm $INSTALL_PREFIX/bin/greenbone-nvt-sync
chmod 740 $INSTALL_PREFIX/sbin/greenbone-feed-sync
chown gvm:gvm $INSTALL_PREFIX/sbin/greenbone-*-sync
chmod 740 $INSTALL_PREFIX/sbin/greenbone-*-sync

export GNUPGHOME=/tmp/openvas-gnupg
mkdir -p $GNUPGHOME

gpg --import /tmp/GBCommunitySigningKey.asc
gpg --import-ownertrust < /tmp/ownertrust.txt

export OPENVAS_GNUPG_HOME=/etc/openvas/gnupg
mkdir -p $OPENVAS_GNUPG_HOME
cp -r /tmp/openvas-gnupg/* $OPENVAS_GNUPG_HOME/
chown -R gvm:gvm $OPENVAS_GNUPG_HOME

apt install -y postgresql
systemctl start postgresql@13-main

su - postgres -c "createuser -DRS gvm" || true
su - postgres -c "createdb -O gvm gvmd" || true

su - postgres -c "psql -d gvmd -c 'create role dba with superuser noinherit;'" || true
su - postgres -c "psql -d gvmd -c 'grant dba to gvm;'" || true




/opt/GCE_$GCE_VERSION/sbin/gvmd --create-user=admin || true
/opt/GCE_$GCE_VERSION/sbin/gvmd --create-user=admin --password=1234 || true

/opt/GCE_$GCE_VERSION/sbin/gvmd --modify-setting 78eceaec-3385-11ea-b237-28d24461215b --value `/opt/GCE_$GCE_VERSION/sbin/gvmd --get-users --verbose | grep admin | awk '{print $2}'`

cat << EOF > /etc/systemd/system/ospd-openvas.service
[Unit]
Description=OSPd Wrapper for the OpenVAS Scanner (ospd-openvas)
Documentation=man:ospd-openvas(8) man:openvas(8)
After=network.target networking.service redis-server@openvas.service
Wants=redis-server@openvas.service
ConditionKernelCommandLine=!recovery

[Service]
Type=forking
User=gvm
Group=gvm
RuntimeDirectory=ospd
RuntimeDirectoryMode=2775
PIDFile=/run/ospd/ospd-openvas.pid
ExecStart=$INSTALL_PREFIX/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/openvas --socket-mode 0o770 --mqtt-broker-address localhost --mqtt-broker-port 1883 --notus-feed-dir /var/lib/notus/advisories
SuccessExitStatus=SIGKILL
Restart=always
RestartSec=60

[Install]
WantedBy=multi-user.target
EOF



cat << EOF > /etc/systemd/system/notus-scanner.service
[Unit]
Description=Notus Scanner
Documentation=https://github.com/greenbone/notus-scanner
After=mosquitto.service
Wants=mosquitto.service
ConditionKernelCommandLine=!recovery

[Service]
Type=forking
User=gvm
RuntimeDirectory=notus-scanner
RuntimeDirectoryMode=2775
PIDFile=/run/notus-scanner/notus-scanner.pid
ExecStart=$INSTALL_PREFIX/bin/notus-scanner --products-directory /var/lib/notus/products --log-file /var/log/gvm/notus-scanner.log
SuccessExitStatus=SIGKILL
Restart=always
RestartSec=60

[Install]
WantedBy=multi-user.target
EOF






cat << EOF > /etc/systemd/system/gvmd.service
[Unit]
Description=Greenbone Vulnerability Manager daemon (gvmd)
After=network.target networking.service postgresql.service ospd-openvas.service
Wants=postgresql.service ospd-openvas.service
Documentation=man:gvmd(8)
ConditionKernelCommandLine=!recovery

[Service]
Type=forking
User=gvm
Group=gvm
PIDFile=/run/gvmd/gvmd.pid
RuntimeDirectory=gvmd
RuntimeDirectoryMode=2775
ExecStart=$INSTALL_PREFIX/sbin/gvmd --osp-vt-update=/run/ospd/ospd-openvas.sock --listen-group=gvm
Restart=always
TimeoutStopSec=10

[Install]
WantedBy=multi-user.target
EOF





cat << EOF > /etc/systemd/system/gsad.service
[Unit]
Description=Greenbone Security Assistant daemon (gsad)
Documentation=man:gsad(8) https://www.greenbone.net
After=network.target gvmd.service
Wants=gvmd.service

[Service]
Type=forking
User=gvm
Group=gvm
RuntimeDirectory=gsad
RuntimeDirectoryMode=2775
PIDFile=/run/gsad/gsad.pid
ExecStart=$INSTALL_PREFIX/sbin/gsad --listen=0.0.0.0 --port=9392 --http-only
Restart=always
TimeoutStopSec=10

[Install]
WantedBy=multi-user.target
Alias=greenbone-security-assistant.service
EOF



systemctl daemon-reload
systemctl enable notus-scanner
systemctl enable ospd-openvas
systemctl enable gvmd
systemctl enable gsad




su - gvm -c "/opt/GCE_$GCE_VERSION/bin/greenbone-nvt-sync"
su - gvm -c "/opt/GCE_$GCE_VERSION/sbin/greenbone-feed-sync --type SCAP"
su - gvm -c "/opt/GCE_$GCE_VERSION/sbin/greenbone-feed-sync --type CERT"
su - gvm -c "/opt/GCE_$GCE_VERSION/sbin/greenbone-feed-sync --type GVMD_DATA"


systemctl start notus-scanner
systemctl start ospd-openvas
systemctl start gvmd
systemctl start gsad

systemctl status notus-scanner
systemctl status ospd-openvas
systemctl status gvmd
systemctl status gsad













else
    exit
fi
